{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hook/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["ComicsList","useState","comicsList","setComicsList","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","arr","map","item","i","className","to","id","src","thumbnail","alt","title","price","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","style","onClick","ComicsPage","AppBanner","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","a","res","results","_transformCharacter","getCharacterByName","name","getCharacter","getSingleCharacter","_transformSingleCharacter","_transformComics","getComic","char","description","descr","lengthDescr","slice","filterDescr","path","extension","homepage","urls","wiki","comics","pageCount","language","textObjects","prices","avengers","avengersLogo"],"mappings":"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","file":"static/js/5.ec9407ea.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(200);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {loading, error, getAllComics} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n        let ended = false;\n        if (newComicsList.length < 8) {\n            ended = true;\n        }\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) {\n        const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading}\n                style={{'display': comicsEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import ComicsList from \"../comicsList/ComicsList\";\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px',objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hook/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, loading, error} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5a0554807bb820263c74f7e1e00b7b23';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getSingleCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformSingleCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async(offset = 310) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n         function filterDescr() {\r\n            let descr = char.description;\r\n            let lengthDescr = char.description.length;\r\n            if (lengthDescr === 0) {\r\n                let noDescr = `There is no data. Press on HOMEPAGE`\r\n                return noDescr\r\n            } else if (lengthDescr >= 200) {\r\n                let limitDescr = descr.slice(0, 200) + '...'\r\n                return limitDescr;\r\n            } else {\r\n                return descr\r\n            }\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: filterDescr(),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformSingleCharacter = (char) => {\r\n        \r\n        function filterDescr() {\r\n            let descr = char.description;\r\n            let lengthDescr = char.description.length;\r\n            if (lengthDescr === 0) {\r\n                let noDescr = `There is no data. Press on HOMEPAGE`\r\n                return noDescr\r\n            } else {\r\n                return descr\r\n            }\r\n        }\r\n\r\n       return {\r\n           id: char.id,\r\n           name: char.name,\r\n           description: filterDescr(),\r\n           thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n           homepage: char.urls[0].url,\r\n           wiki: char.urls[1].url,\r\n           comics: char.comics.items\r\n       }\r\n   }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n    }\r\n    \r\n\r\n    return {\r\n        clearError,\r\n        error,\r\n        loading,\r\n        getAllCharacters,\r\n        getAllComics,\r\n        getCharacter,\r\n        getSingleCharacter,\r\n        getCharacterByName,\r\n        getComic\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {request, loading, error, clearError};\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}