{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hook/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","items","arr","map","item","i","clazz","selectedChar","CSSTransition","timeout","classNames","tabIndex","onCharSelected","TransitionGroup","component","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","CharSearchForm","getCharacterByName","onCharLoading","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","a","res","_transformCharacter","getSingleCharacter","_transformSingleCharacter","getAllComics","_transformComics","getComic","descr","lengthDescr","slice","filterDescr","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"yKAAe,G,MAAA,IAA0B,qC,OC2DnCA,EAAO,SAAH,GAAgB,IAAXC,EAAI,EAAJA,KACJC,EAAgDD,EAAhDC,KAAMC,EAA0CF,EAA1CE,YAAaC,EAA6BH,EAA7BG,UAAWC,EAAkBJ,EAAlBI,SAAUC,EAAQL,EAARK,KAC3CC,EAAW,CAAC,UAAc,SAK9B,MAJkB,wEAAdH,IACAG,EAAW,CAAC,UAAc,YAI1B,sBAAKC,UAAU,oBAAmB,UAC9B,qBAAKC,IAAKL,EAAWM,IAAI,mBAAmBF,UAAU,kBAAkBG,MAAOJ,IAC/E,sBAAKC,UAAU,mBAAkB,UAC7B,mBAAGA,UAAU,mBAAkB,SAAEN,IACjC,mBAAGM,UAAU,oBAAmB,SAC3BL,IAEL,sBAAKK,UAAU,mBAAkB,UAC7B,mBAAGI,KAAMP,EAAUG,UAAU,sBAAqB,SAC9C,qBAAKA,UAAU,QAAO,SAAC,eAE3B,mBAAGI,KAAMN,EAAME,UAAU,2BAA0B,SAC/C,qBAAKA,UAAU,QAAO,SAAC,qBAQhCK,EA/EI,WAEf,MAAwBC,mBAAS,MAAK,mBAA/Bb,EAAI,KAAEc,EAAO,KACpB,EAAmDC,cAA5CC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAErCC,qBAAU,WACNC,IACA,IAAMC,EAAUC,YAAYF,EAAY,KAExC,OAAO,WACHG,cAAcF,MAEnB,IAEH,IAAMG,EAAe,SAACzB,GAClBc,EAAQd,IAGNqB,EAAa,WACfF,IACA,IAAMO,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,UAAkC,OAC7DX,EAAaQ,GACRI,KAAKL,IAGRM,EAAed,EAAQ,cAACe,EAAA,EAAY,IAAK,KACzCC,EAAUjB,EAAU,cAACkB,EAAA,EAAO,IAAK,KACjCC,EAAYnB,GAAWC,IAAUjB,EAA+B,KAAvB,cAAC,EAAI,CAACA,KAAMA,IAE3D,OACI,sBAAKO,UAAU,aAAY,UACtBwB,EACAE,EACAE,EACD,sBAAK5B,UAAU,qBAAoB,UAC/B,oBAAGA,UAAU,oBAAmB,UAAC,8BACF,uBAAK,4CAGpC,mBAAGA,UAAU,oBAAmB,SAAC,0BAGjC,wBAAQ6B,QAASf,EAAYd,UAAU,sBAAqB,SACxD,qBAAKA,UAAU,QAAO,SAAC,aAE3B,qBAAKC,IAAK6B,EAAS5B,IAAI,UAAUF,UAAU,kC,gDCyC5C+B,G,MArFE,SAACC,GACd,MAAgC1B,mBAAS,IAAG,mBAArC2B,EAAQ,KAAEC,EAAW,KAC5B,EAA4C5B,oBAAS,GAAM,mBAApD6B,EAAc,KAAEC,EAAiB,KACxC,EAA4B9B,mBAAS,KAAI,mBAAlC+B,EAAM,KAAEC,EAAS,KACxB,EAAkChC,oBAAS,GAAM,mBAA1CiC,EAAS,KAAEC,EAAY,KAE9B,EAA2ChC,cAApCC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAO+B,EAAgB,EAAhBA,iBAEvB5B,qBAAU,WACN6B,EAAUL,GAAQ,KACnB,IAEH,IAAMK,EAAY,SAACL,EAAQM,GACbP,GAAVO,GAEAF,EAAiBJ,GACZd,KAAKqB,IAGRA,EAAgB,uCAAG,WAAMC,GAAW,uEAClCC,GAAQ,EACTD,EAAYE,OAAS,IACpBD,GAAQ,GAGZZ,EAAY,GAAD,mBAAKD,GAAQ,YAAKY,KAC7BT,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAaM,GAAO,2CACvB,gBAVqB,sCA6CtB,IAAME,EAjCN,SAAqBC,GACjB,IAAMD,EAAQC,EAAIC,KAAI,SAACC,EAAMC,GACzB,IAAIrD,EAAW,CAAC,UAAc,SACP,wEAAnBoD,EAAKvD,YACLG,EAAW,CAAC,UAAc,UAE9B,IACMsD,EADSrB,EAAMsB,eAAiBH,EAAKhC,GACpB,iCAAmC,aAE1D,OACI,cAACoC,EAAA,EAAa,CAAeC,QAAS,IAAKC,WAAYJ,EAAM,SACzD,qBAEIrD,UAAWqD,EACXK,SAAU,EACV7B,QAAS,kBAAMG,EAAM2B,eAAeR,EAAKhC,KAAI,UACzC,qBAAKlB,IAAKkD,EAAKvD,UAAWM,IAAKiD,EAAKzD,KAAMS,MAAOJ,IACjD,qBAAKC,UAAU,aAAY,SAAEmD,EAAKzD,SALjCyD,EAAKhC,KAFEgC,EAAKhC,OAcjC,OACI,oBAAInB,UAAU,aAAY,SACtB,cAAC4D,EAAA,EAAe,CAACC,UAAW,KAAK,SAC5Bb,MAMHc,CAAY7B,GAEpBT,EAAed,EAAQ,cAACe,EAAA,EAAY,IAAK,KACzCC,EAAUjB,IAAY0B,EAAiB,cAACR,EAAA,EAAO,IAAK,KAE1D,OACI,sBAAK3B,UAAU,aAAY,UACtBwB,EACAE,EACAsB,EACD,wBACIe,SAAU5B,EACVhC,MAAO,CAAC,QAAYoC,EAAY,OAAS,SACzCvC,UAAU,mCACV6B,QAAS,kBAAMa,EAAUL,IAAQ,SACjC,qBAAKrC,UAAU,QAAO,SAAC,qBCrExBgE,G,MAjBE,WACb,OACI,qCACI,mBAAGhE,UAAU,eAAc,SAAC,iDAC5B,sBAAKA,UAAU,WAAU,UACrB,sBAAKA,UAAU,yBAAwB,UACnC,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,4BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,kCCoCzBR,G,MAAO,SAAH,GAAgB,IAAXC,EAAI,EAAJA,KACJC,EAAwDD,EAAxDC,KAAMC,EAAkDF,EAAlDE,YAAaC,EAAqCH,EAArCG,UAAWqE,EAA0BxE,EAA1BwE,OAAQnE,EAAkBL,EAAlBK,KAAMD,EAAYJ,EAAZI,SAE/CE,EAAW,CAAC,UAAa,SAK7B,MAJkB,wEAAdH,IACAG,EAAW,CAAC,UAAa,YAIzB,qCACI,sBAAKC,UAAU,eAAc,UACzB,qBAAKC,IAAKL,EAAWM,IAAKR,EAAMS,MAAOJ,IACvC,gCACI,qBAAKC,UAAU,kBAAiB,SAAEN,IAClC,sBAAKM,UAAU,aAAY,UACvB,mBAAGI,KAAMP,EAAUG,UAAU,sBAAqB,SAC9C,qBAAKA,UAAU,QAAO,SAAC,eAE3B,mBAAGI,KAAMN,EAAME,UAAU,2BAA0B,SAC/C,qBAAKA,UAAU,QAAO,SAAC,oBAKvC,qBAAKA,UAAU,cAAa,SACvBL,IAEL,qBAAKK,UAAU,eAAc,SAAC,YAC9B,qBAAIA,UAAU,oBAAmB,UAC5BiE,EAAOlB,OAAS,EAAI,KAAO,yCAExBkB,EAAOf,KAAI,SAACC,EAAMC,GAEd,KAAIA,EAAI,GACR,OACI,oBAAYpD,UAAU,oBAAmB,SACpCmD,EAAKzD,MADD0D,cAWtBc,EAtFE,SAAClC,GAEd,MAAwB1B,mBAAS,MAAK,mBAA/Bb,EAAI,KAAEc,EAAO,KAEpB,EAAmDC,cAA5CC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOC,EAAY,EAAZA,aAAcC,EAAU,EAAVA,WAErCC,qBAAU,WACNC,MACD,CAACkB,EAAMmC,SAEV,IAAMrD,EAAa,WACf,IAAOqD,EAAUnC,EAAVmC,OACFA,IAGLvD,IAEAD,EAAawD,GACR5C,KAAKL,KAGRA,EAAe,SAACzB,GAClBc,EAAQd,IAGN2E,EAAW3E,GAAQiB,GAASD,EAAU,KAAO,cAAC,EAAQ,IACtDiB,EAAUjB,EAAU,cAACkB,EAAA,EAAO,IAAK,KACjCH,EAAed,EAAQ,cAACe,EAAA,EAAY,IAAK,KACzCG,EAAYnB,GAAWC,IAAUjB,EAAgC,KAAxB,cAAC,EAAI,CAACA,KAAQA,IAE7D,OACI,sBAAKO,UAAU,aAAY,UACtBoE,EACA1C,EACAF,EACAI,M,gCChBEyC,EAzBI,iKAGd,OAHc,oCACfC,MAAQ,CACJ5D,OAAO,GACV,EAmBA,OAnBA,8CAMD,SAAkBA,EAAO6D,GACrBC,QAAQC,IAAI/D,EAAO6D,GACnBG,KAAKC,SAAS,CACVjE,OAAO,MAEd,oBAED,WACI,OAAIgE,KAAKJ,MAAM5D,MACJ,cAACe,EAAA,EAAY,IAGjBiD,KAAK1C,MAAM4C,aACrB,EAtBc,C,OAASC,W,0BCsEbC,G,OA/DQ,WACnB,MAAwBxE,mBAAS,MAAK,mBAA/Bb,EAAI,KAAEc,EAAO,KACpB,EAAyDC,cAAlDC,EAAO,EAAPA,QAASC,EAAK,EAALA,MAAOqE,EAAkB,EAAlBA,mBAAoBnE,EAAU,EAAVA,WAErCoE,EAAgB,SAACvF,GACnBc,EAAQd,IAUN+B,EAAed,EAAQ,qBAAKV,UAAU,8BAA6B,SAAC,cAACyB,EAAA,EAAY,MAAW,KAC5FwD,EAAWxF,EAAcA,EAAKsD,OAAS,EAC7B,sBAAK/C,UAAU,uBAAsB,UACjC,sBAAKA,UAAU,uBAAsB,UAAC,mBAAiBP,EAAK,GAAGC,KAAK,YACpE,cAAC,IAAI,CAACwF,GAAE,sBAAiBzF,EAAK,GAAG0B,IAAMnB,UAAU,2BAA0B,SACvE,qBAAKA,UAAU,QAAO,SAAC,iBAG/B,qBAAKA,UAAU,qBAAoB,SAAC,uCAP5B,KAWxB,OACI,sBAAKA,UAAU,oBAAmB,UAC9B,cAAC,IAAM,CACPmF,cAAe,CACXC,SAAU,IAEdC,iBAAkBC,IAAW,CACzBF,SAAUE,MAAaC,SAAS,4BAEpCC,SAAW,YAAiB,IA5BhB9F,EA4BC0F,EAAQ,EAARA,SA5BD1F,EA6BG0F,EA5BnBxE,IAEAmE,EAAmBrF,GACd6B,KAAKyD,IA0BJ,SACE,eAAC,IAAI,WACD,uBAAOhF,UAAU,qBAAqByF,QAAQ,WAAU,SAAC,iCACzD,sBAAKzF,UAAU,uBAAsB,UACjC,cAAC,IAAK,CACNmB,GAAG,WACHzB,KAAK,WACLgG,KAAK,OACLC,YAAY,yBACZ,wBACAD,KAAK,SACL1F,UAAU,sBACV+D,SAAUtD,EAAQ,SACd,qBAAKT,UAAU,QAAO,SAAC,cAG/B,cAAC,IAAkB,CAAC6D,UAAU,MAAM7D,UAAU,qBAAqBN,KAAK,kBAG/E8B,EACAyD,OCpEE,MAA0B,mCCwC1BW,UA9BE,WACb,MAAgCtF,mBAAS,MAAK,mBAAvCgD,EAAY,KAAE/C,EAAO,KAM5B,OACI,qCACI,cAAC,EAAa,UACV,cAAC,EAAU,MAEf,sBAAKP,UAAU,gBAAe,UAC1B,cAAC,EAAa,UACV,cAAC,EAAQ,CAAC2D,eAXH,SAACxC,GACpBZ,EAAQY,QAYA,gCACI,cAAC,EAAa,UACV,cAAC,EAAQ,CAACgD,OAAQb,MAEtB,cAAC,EAAa,UACV,cAAC,EAAc,YAI3B,qBAAKtD,UAAU,gBAAgBC,IAAK4F,EAAY3F,IAAI,gB,gCCnCjD,UAA0B,kC,OCQ1BuB,IANM,WACjB,OACI,qBAAKtB,MAAO,CAAE2F,QAAS,QAASC,MAAO,QAASC,OAAQ,QAAQC,UAAW,UAAWC,OAAQ,UAAWjG,IAAKkG,EAAKjG,IAAI,Y,yECmHhHM,IArHU,WACrB,MCDmB,WACnB,MAA8BF,oBAAS,GAAM,mBAAtCG,EAAO,KAAE2F,EAAU,KAC1B,EAA0B9F,mBAAS,MAAK,mBAAjCI,EAAK,KAAE2F,EAAQ,KA0BtB,MAAO,CAACC,QAxBQC,sBAAW,uCAAC,WAAOC,GAAG,2FAEjB,OAFmBC,EAAM,+BAAG,MAAOC,EAAI,+BAAG,KAAMC,EAAO,+BAAG,CAAC,eAAgB,oBAE5FP,GAAW,GAAM,kBAGUQ,MAAMJ,EAAK,CAACC,SAAQC,OAAMC,YAAU,KAAD,EAA5C,IAARE,EAAQ,QAEAC,GAAG,CAAD,sBACN,IAAIC,MAAM,mBAAD,OAAoBP,EAAG,qBAAaK,EAASG,SAAU,KAAD,oBAGtDH,EAASI,OAAO,KAAD,GAEhB,OAFZC,EAAI,OAEVd,GAAW,GAAO,kBACXc,GAAI,QAGS,MAHT,0BAEXd,GAAW,GACXC,EAAS,KAAEc,SAAS,+DAG3B,mDApB0B,GAoBxB,IAIc1G,UAASC,QAAOE,WAFd2F,uBAAY,kBAAMF,EAAS,QAAO,KDzBPe,GAAvCd,EAAO,EAAPA,QAAS1F,EAAU,EAAVA,WAAYH,EAAO,EAAPA,QAASC,EAAK,EAALA,MAE/B2G,EAAW,4CACXC,EAAU,0CAGV7E,EAAgB,uCAAG,0CAAA8E,EAAA,sDAA2B,OAApBlF,EAAM,+BAFlB,IAEgC,SAC9BiE,EAAQ,GAAD,OAAIe,EAAQ,qCAA6BhF,EAAM,YAAIiF,IAAW,KAAD,EAA7E,OAAHE,EAAG,yBACFA,EAAIN,KAAKjC,QAAQ/B,IAAIuE,IAAoB,2CACnD,kBAHqB,mCAKhB1C,EAAkB,uCAAG,WAAOrF,GAAI,uFACtB4G,EAAQ,GAAD,OAAIe,EAAQ,2BAAmB3H,EAAI,YAAI4H,IAAW,KAAD,EAAjE,OAAHE,EAAG,yBACIA,EAAIN,KAAKjC,QAAQ/B,IAAIuE,IAAoB,2CACtD,gBAH0B,sCAKlB9G,EAAY,uCAAG,WAAOQ,GAAE,uFACRmF,EAAQ,GAAD,OAAIe,EAAQ,sBAAclG,EAAE,YAAImG,IAAW,KAAD,EAA1D,OAAHE,EAAG,yBACFC,EAAoBD,EAAIN,KAAKjC,QAAQ,KAAG,2CAClD,gBAHiB,sCAKZyC,EAAkB,uCAAG,WAAOvG,GAAE,uFACdmF,EAAQ,GAAD,OAAIe,EAAQ,sBAAclG,EAAE,YAAImG,IAAW,KAAD,EAA1D,OAAHE,EAAG,yBACFG,EAA0BH,EAAIN,KAAKjC,QAAQ,KAAG,2CACxD,gBAHuB,sCAKlB2C,EAAY,uCAAG,0CAAAL,EAAA,sDAAkB,OAAZlF,EAAM,+BAAG,IAAG,SACjBiE,EAAQ,GAAD,OAAIe,EAAQ,qDAA6ChF,EAAM,YAAIiF,IAAW,KAAD,EAA7F,OAAHE,EAAG,yBACFA,EAAIN,KAAKjC,QAAQ/B,IAAI2E,IAAiB,2CAChD,kBAHiB,mCAKZC,EAAQ,uCAAG,WAAO3G,GAAE,uFACJmF,EAAQ,GAAD,OAAIe,EAAQ,kBAAUlG,EAAE,YAAImG,IAAW,KAAD,EAAtD,OAAHE,EAAG,yBACFK,EAAiBL,EAAIN,KAAKjC,QAAQ,KAAG,2CAC/C,gBAHa,sCAKRwC,EAAsB,SAAChI,GAezB,MAAO,CACH0B,GAAI1B,EAAK0B,GACTzB,KAAMD,EAAKC,KACXC,YAhBH,WACG,IAAIoI,EAAQtI,EAAKE,YACbqI,EAAcvI,EAAKE,YAAYoD,OACnC,GAAoB,IAAhBiF,EAAmB,CAEnB,MADW,sCAER,OAAIA,GAAe,IACLD,EAAME,MAAM,EAAG,KAAO,MAGhCF,EAMEG,GACbtI,UAAWH,EAAKG,UAAUuI,KAAO,IAAM1I,EAAKG,UAAUwI,UACtDvI,SAAUJ,EAAK4I,KAAK,GAAG7B,IACvB1G,KAAML,EAAK4I,KAAK,GAAG7B,IACnBvC,OAAQxE,EAAKwE,OAAOjB,QAItB2E,EAA4B,SAAClI,GAahC,MAAO,CACH0B,GAAI1B,EAAK0B,GACTzB,KAAMD,EAAKC,KACXC,YAdH,WACI,IAAIoI,EAAQtI,EAAKE,YAEjB,GAAoB,IADFF,EAAKE,YAAYoD,OACZ,CAEnB,MADW,sCAGX,OAAOgF,EAOCG,GACbtI,UAAWH,EAAKG,UAAUuI,KAAO,IAAM1I,EAAKG,UAAUwI,UACtDvI,SAAUJ,EAAK4I,KAAK,GAAG7B,IACvB1G,KAAML,EAAK4I,KAAK,GAAG7B,IACnBvC,OAAQxE,EAAKwE,OAAOjB,QAIrB6E,EAAmB,SAAC5D,GAAY,IAAD,EACjC,MAAO,CACZ9C,GAAI8C,EAAO9C,GACXmH,MAAOrE,EAAOqE,MACd3I,YAAasE,EAAOtE,aAAe,0BACnC4I,UAAWtE,EAAOsE,UAAS,UACrBtE,EAAOsE,UAAS,OACnB,2CACH3I,UAAWqE,EAAOrE,UAAUuI,KAAO,IAAMlE,EAAOrE,UAAUwI,UAC1DI,UAA+B,QAArB,EAAAvE,EAAOwE,YAAY,UAAE,aAArB,EAAuBD,WAAY,QAC7CE,MAAOzE,EAAO0E,OAAO,GAAGD,MAAK,UACvBzE,EAAO0E,OAAO,GAAGD,MAAK,KACzB,kBAKF,MAAO,CACH9H,aACAF,QACAD,UACAgC,mBACAmF,eACAjH,eACA+G,qBACA3C,qBACA+C,c","file":"static/js/4.d96b02ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect } from \"react\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport Spinner from \"../spinner/Spinner\";\r\n\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(300);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n\r\n    const {loading, error, getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded);\r\n    }\r\n\r\n    const onCharListLoaded = async(newCharList) => {\r\n        let ended = false;\r\n        if(newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList([...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            const active = props.selectedChar === item.id;\r\n            const clazz = active ? 'char__item char__item_selected' : 'char__item'\r\n\r\n            return (\r\n                <CSSTransition key={item.id} timeout={500} classNames={clazz}>\r\n                    <li\r\n                        key={item.id}\r\n                        className={clazz}\r\n                        tabIndex={0}\r\n                        onClick={() => props.onCharSelected(item.id)}>\r\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\r\n                            <div className=\"char__name\">{item.name}</div>\r\n                    </li>\r\n                </CSSTransition>\r\n                \r\n            )\r\n        });\r\n\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                <TransitionGroup component={null}>\r\n                    {items}\r\n                </TransitionGroup>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(charList);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                disabled={newItemLoading} \r\n                style={{'display' : charEnded ? 'none' : 'block'}}\r\n                className=\"button button__main button__long\"\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton';\r\n\r\nimport './charInfo.scss'; \r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n    \r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar()\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n\r\n        getCharacter(charId)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const skeleton = char || error || loading ? null : <Skeleton/>\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const content = !(loading || error || !char) ? <View char = {char}/> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {spinner}\r\n            {errorMessage}\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, comics, wiki, homepage} = char;\r\n\r\n    let imgStyle = {'objectFit': 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit': 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'There is no comics with this character'}\r\n                {\r\n                    comics.map((item, i) => {\r\n                        // eslint-disable-next-line\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }                \r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","import { Component } from \"react/cjs/react.development\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    /* static getDerivedStateFromError(error) {\r\n        return {error: true};\r\n    } */\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormicErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoading = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoading);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage/></div> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        Character not found. Please retry!\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n            initialValues={{\r\n                charName: ''\r\n            }}\r\n            validationSchema={Yup.object({\r\n                charName: Yup.string().required('This field is required')\r\n            })}\r\n            onSubmit={ ({charName}) => {\r\n                updateChar(charName)\r\n            }}>\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                        id='charName'\r\n                        name='charName'\r\n                        type='text'\r\n                        placeholder='Enter name character'/>\r\n                        <button\r\n                        type='submit'\r\n                        className=\"button button__main\"\r\n                        disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormicErrorMessage component='div' className='char__search-error' name='charName'/>\r\n                </Form>\r\n            </Formik>\r\n            {errorMessage}\r\n            {results}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px',objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hook/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, loading, error} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5a0554807bb820263c74f7e1e00b7b23';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getSingleCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformSingleCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async(offset = 310) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n         function filterDescr() {\r\n            let descr = char.description;\r\n            let lengthDescr = char.description.length;\r\n            if (lengthDescr === 0) {\r\n                let noDescr = `There is no data. Press on HOMEPAGE`\r\n                return noDescr\r\n            } else if (lengthDescr >= 200) {\r\n                let limitDescr = descr.slice(0, 200) + '...'\r\n                return limitDescr;\r\n            } else {\r\n                return descr\r\n            }\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: filterDescr(),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformSingleCharacter = (char) => {\r\n        \r\n        function filterDescr() {\r\n            let descr = char.description;\r\n            let lengthDescr = char.description.length;\r\n            if (lengthDescr === 0) {\r\n                let noDescr = `There is no data. Press on HOMEPAGE`\r\n                return noDescr\r\n            } else {\r\n                return descr\r\n            }\r\n        }\r\n\r\n       return {\r\n           id: char.id,\r\n           name: char.name,\r\n           description: filterDescr(),\r\n           thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n           homepage: char.urls[0].url,\r\n           wiki: char.urls[1].url,\r\n           comics: char.comics.items\r\n       }\r\n   }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n    }\r\n    \r\n\r\n    return {\r\n        clearError,\r\n        error,\r\n        loading,\r\n        getAllCharacters,\r\n        getAllComics,\r\n        getCharacter,\r\n        getSingleCharacter,\r\n        getCharacterByName,\r\n        getComic\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {request, loading, error, clearError};\r\n}"],"sourceRoot":""}