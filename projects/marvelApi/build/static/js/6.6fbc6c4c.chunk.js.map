{"version":3,"sources":["components/pages/singleComicPage/SingleComicPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hook/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["View","comic","thumbnail","title","description","pageCount","language","price","className","src","alt","to","SingleComicPage","comicId","useParams","useState","setComic","useMarvelService","loading","error","clearError","getComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","content","ErrorMessage","style","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","getAllCharacters","a","offset","res","results","map","_transformCharacter","getCharacterByName","name","getCharacter","id","getSingleCharacter","_transformSingleCharacter","getAllComics","_transformComics","char","descr","lengthDescr","length","slice","filterDescr","path","extension","homepage","urls","wiki","comics","items","textObjects","prices","AppBanner","avengers","avengersLogo"],"mappings":"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","file":"static/js/6.6fbc6c4c.chunk.js","sourcesContent":["import {Link, useParams} from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport useMarvelService from '../../../services/MarvelService';\r\nimport Spinner from '../../spinner/Spinner';\r\nimport ErrorMessage from '../../errorMessage/ErrorMessage';\r\nimport AppBanner from '../../appBanner/AppBanner';\r\n\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState('null');\r\n    \r\n    const {loading, error, clearError, getComic} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId])\r\n\r\n    const updateComic = () => {\r\n        clearError();\r\n\r\n        getComic(comicId)\r\n            .then(onComicLoaded);\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> :  null;\r\n    const content = !(loading || error || !comic) ? <View comic = {comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    \r\n    const {thumbnail, title, description, pageCount, language, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n                <div className=\"single-comic__info\">\r\n                    <h2 className=\"single-comic__name\">{title}</h2>\r\n                    <p className=\"single-comic__descr\">{description}</p>\r\n                    <p className=\"single-comic__descr\">{pageCount}</p>\r\n                    <p className=\"single-comic__descr\">Language: {language}</p>\r\n                    <div className=\"single-comic__price\">{price}</div>\r\n                </div>\r\n            <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n        </div>     \r\n    )\r\n}\r\n\r\nexport default SingleComicPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: '250px', height: '250px',objectFit: 'contain', margin: '0 auto'}} src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from \"../hook/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, loading, error} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=5a0554807bb820263c74f7e1e00b7b23';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getSingleCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformSingleCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async(offset = 310) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n         function filterDescr() {\r\n            let descr = char.description;\r\n            let lengthDescr = char.description.length;\r\n            if (lengthDescr === 0) {\r\n                let noDescr = `There is no data. Press on HOMEPAGE`\r\n                return noDescr\r\n            } else if (lengthDescr >= 200) {\r\n                let limitDescr = descr.slice(0, 200) + '...'\r\n                return limitDescr;\r\n            } else {\r\n                return descr\r\n            }\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: filterDescr(),\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformSingleCharacter = (char) => {\r\n        \r\n        function filterDescr() {\r\n            let descr = char.description;\r\n            let lengthDescr = char.description.length;\r\n            if (lengthDescr === 0) {\r\n                let noDescr = `There is no data. Press on HOMEPAGE`\r\n                return noDescr\r\n            } else {\r\n                return descr\r\n            }\r\n        }\r\n\r\n       return {\r\n           id: char.id,\r\n           name: char.name,\r\n           description: filterDescr(),\r\n           thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n           homepage: char.urls[0].url,\r\n           wiki: char.urls[1].url,\r\n           comics: char.comics.items\r\n       }\r\n   }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n\t\t\tid: comics.id,\r\n\t\t\ttitle: comics.title,\r\n\t\t\tdescription: comics.description || \"There is no description\",\r\n\t\t\tpageCount: comics.pageCount\r\n\t\t\t\t? `${comics.pageCount} p.`\r\n\t\t\t\t: \"No information about the number of pages\",\r\n\t\t\tthumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n\t\t\tlanguage: comics.textObjects[0]?.language || \"en-us\",\r\n\t\t\tprice: comics.prices[0].price\r\n\t\t\t\t? `${comics.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n\t\t};\r\n    }\r\n    \r\n\r\n    return {\r\n        clearError,\r\n        error,\r\n        loading,\r\n        getAllCharacters,\r\n        getAllComics,\r\n        getCharacter,\r\n        getSingleCharacter,\r\n        getCharacterByName,\r\n        getComic\r\n    };\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {request, loading, error, clearError};\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;"],"sourceRoot":""}